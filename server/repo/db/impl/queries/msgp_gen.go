package queries

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"net"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *msgpIPNet) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 []byte
		zb0002, err = dc.ReadBytes([]byte(z.IP))
		if err != nil {
			err = msgp.WrapError(err, "IP")
			return
		}
		z.IP = net.IP(zb0002)
	}
	{
		var zb0003 []byte
		zb0003, err = dc.ReadBytes([]byte(z.Mask))
		if err != nil {
			err = msgp.WrapError(err, "Mask")
			return
		}
		z.Mask = net.IPMask(zb0003)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *msgpIPNet) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteBytes([]byte(z.IP))
	if err != nil {
		err = msgp.WrapError(err, "IP")
		return
	}
	err = en.WriteBytes([]byte(z.Mask))
	if err != nil {
		err = msgp.WrapError(err, "Mask")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *msgpIPNet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendBytes(o, []byte(z.IP))
	o = msgp.AppendBytes(o, []byte(z.Mask))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *msgpIPNet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 []byte
		zb0002, bts, err = msgp.ReadBytesBytes(bts, []byte(z.IP))
		if err != nil {
			err = msgp.WrapError(err, "IP")
			return
		}
		z.IP = net.IP(zb0002)
	}
	{
		var zb0003 []byte
		zb0003, bts, err = msgp.ReadBytesBytes(bts, []byte(z.Mask))
		if err != nil {
			err = msgp.WrapError(err, "Mask")
			return
		}
		z.Mask = net.IPMask(zb0003)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *msgpIPNet) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len([]byte(z.IP)) + msgp.BytesPrefixSize + len([]byte(z.Mask))
	return
}
