package queries

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"net"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *wgClientValueV1) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	err = (*msgpIPNet)(&z.Address).DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	err = dc.ReadExactBytes((z.PrivateKey)[:])
	if err != nil {
		err = msgp.WrapError(err, "PrivateKey")
		return
	}
	err = dc.ReadExactBytes((z.PublicKey)[:])
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "DNS")
		return
	}
	if cap(z.DNS) >= int(zb0002) {
		z.DNS = (z.DNS)[:zb0002]
	} else {
		z.DNS = make([]net.IP, zb0002)
	}
	for za0007 := range z.DNS {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes([]byte(z.DNS[za0007]))
			if err != nil {
				err = msgp.WrapError(err, "DNS", za0007)
				return
			}
			z.DNS[za0007] = net.IP(zb0003)
		}
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "AllowedIPs")
		return
	}
	if cap(z.AllowedIPs) >= int(zb0004) {
		z.AllowedIPs = (z.AllowedIPs)[:zb0004]
	} else {
		z.AllowedIPs = make([]net.IPNet, zb0004)
	}
	for za0008 := range z.AllowedIPs {
		err = (*msgpIPNet)(&z.AllowedIPs[za0008]).DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "AllowedIPs", za0008)
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PersistentKeepalive")
			return
		}
		z.PersistentKeepalive = nil
	} else {
		if z.PersistentKeepalive == nil {
			z.PersistentKeepalive = new(int64)
		}
		*z.PersistentKeepalive, err = dc.ReadInt64()
		if err != nil {
			err = msgp.WrapError(err, "PersistentKeepalive")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *wgClientValueV1) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x96)
	if err != nil {
		return
	}
	err = (*msgpIPNet)(&z.Address).EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	err = en.WriteBytes((z.PrivateKey)[:])
	if err != nil {
		err = msgp.WrapError(err, "PrivateKey")
		return
	}
	err = en.WriteBytes((z.PublicKey)[:])
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DNS)))
	if err != nil {
		err = msgp.WrapError(err, "DNS")
		return
	}
	for za0007 := range z.DNS {
		err = en.WriteBytes([]byte(z.DNS[za0007]))
		if err != nil {
			err = msgp.WrapError(err, "DNS", za0007)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.AllowedIPs)))
	if err != nil {
		err = msgp.WrapError(err, "AllowedIPs")
		return
	}
	for za0008 := range z.AllowedIPs {
		err = (*msgpIPNet)(&z.AllowedIPs[za0008]).EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "AllowedIPs", za0008)
			return
		}
	}
	if z.PersistentKeepalive == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.PersistentKeepalive)
		if err != nil {
			err = msgp.WrapError(err, "PersistentKeepalive")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *wgClientValueV1) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 6
	o = append(o, 0x96)
	o, err = (*msgpIPNet)(&z.Address).MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	o = msgp.AppendBytes(o, (z.PrivateKey)[:])
	o = msgp.AppendBytes(o, (z.PublicKey)[:])
	o = msgp.AppendArrayHeader(o, uint32(len(z.DNS)))
	for za0007 := range z.DNS {
		o = msgp.AppendBytes(o, []byte(z.DNS[za0007]))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.AllowedIPs)))
	for za0008 := range z.AllowedIPs {
		o, err = (*msgpIPNet)(&z.AllowedIPs[za0008]).MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "AllowedIPs", za0008)
			return
		}
	}
	if z.PersistentKeepalive == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.PersistentKeepalive)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *wgClientValueV1) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	bts, err = (*msgpIPNet)(&z.Address).UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	bts, err = msgp.ReadExactBytes(bts, (z.PrivateKey)[:])
	if err != nil {
		err = msgp.WrapError(err, "PrivateKey")
		return
	}
	bts, err = msgp.ReadExactBytes(bts, (z.PublicKey)[:])
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DNS")
		return
	}
	if cap(z.DNS) >= int(zb0002) {
		z.DNS = (z.DNS)[:zb0002]
	} else {
		z.DNS = make([]net.IP, zb0002)
	}
	for za0007 := range z.DNS {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, []byte(z.DNS[za0007]))
			if err != nil {
				err = msgp.WrapError(err, "DNS", za0007)
				return
			}
			z.DNS[za0007] = net.IP(zb0003)
		}
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "AllowedIPs")
		return
	}
	if cap(z.AllowedIPs) >= int(zb0004) {
		z.AllowedIPs = (z.AllowedIPs)[:zb0004]
	} else {
		z.AllowedIPs = make([]net.IPNet, zb0004)
	}
	for za0008 := range z.AllowedIPs {
		bts, err = (*msgpIPNet)(&z.AllowedIPs[za0008]).UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "AllowedIPs", za0008)
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PersistentKeepalive = nil
	} else {
		if z.PersistentKeepalive == nil {
			z.PersistentKeepalive = new(int64)
		}
		*z.PersistentKeepalive, bts, err = msgp.ReadInt64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "PersistentKeepalive")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *wgClientValueV1) Msgsize() (s int) {
	s = 1 + (*msgpIPNet)(&z.Address).Msgsize() + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + msgp.ArrayHeaderSize
	for za0007 := range z.DNS {
		s += msgp.BytesPrefixSize + len([]byte(z.DNS[za0007]))
	}
	s += msgp.ArrayHeaderSize
	for za0008 := range z.AllowedIPs {
		s += (*msgpIPNet)(&z.AllowedIPs[za0008]).Msgsize()
	}
	if z.PersistentKeepalive == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	return
}
